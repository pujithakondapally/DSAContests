//A substring is special if it composed of only a single type of character.determine the longest special substring in s that occurs atleast thrice.

#include <iostream>
#include <string>
#include <unordered_map>
using namespace std;

bool isSpecial(const string& str) {
    for (int i = 1; i < str.size(); i++) {
        if (str[i] != str[0]) {
            return false;
        }
    }
    return true;
}

string longestSpecialSubstring(string s) {
    unordered_map<string, int> substringCount;
    string longestSubstring = "";

    for (int i = 0; i < s.size(); i++) {
        string current = "";
        for (int j = i; j < s.size(); j++) {
            current += s[j];

            if (isSpecial(current)) {
                substringCount[current]++;

                if (substringCount[current] >= 3 && current.size() > longestSubstring.size()) {
                    longestSubstring = current;
                }
            } else {
                break; 
            }
        }
    }

    return longestSubstring;
}

int main() {
    string s;
    cout << "Enter the string: ";
    cin >> s;

    string result = longestSpecialSubstring(s);
    if (!result.empty()) {
        cout << "Longest special substring occurring at least 3 times: " << result << endl;
    } else {
        cout << "No special substring occurs at least 3 times." << endl;
    }

    return 0;
}
